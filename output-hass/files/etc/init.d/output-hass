#!/bin/sh /etc/rc.common
START=85
USE_PROCD=1
APP=output-hass

remove_output() {
	local cfg="$1"
	local instance="$2"
	local connection
	config_get connection "$cfg" connection
	[ "$connection" = "output-hass.${instance}" ] && uci -q delete mosquitto.$cfg
}

# Currently only support sending single data types, but we're not doing a good job of making hass names and et names :|
add_data_types() {
	local dtype="$1"
	local newcfg="$2"
	local interval="$3"
	local remote_prefix="$4"
	[ "$dtype" = "voltage" ] && dtype=volt
	uci -q add_list mosquitto.$newcfg.topic="/interval/$interval/+/$dtype/# out 1 status/local/json $remote_prefix/status"
	# handle the split variables for energy on a bar
	[ "$dtype" = "cumulative_wh" ] && add_data_types wh_in $newcfg $interval $remote_prefix
}

add_output() {
	local cfg="$1"
	local newcfg mqtt_host mqtt_port mqtt_user mqtt_pass mqtt_use_tls mqtt_cafile mqtt_data_prefix
	# XXX notification topics for availability?
	newcfg=$(uci add mosquitto bridge)
	config_get mqtt_host $cfg mqtt_host
	config_get mqtt_port $cfg mqtt_port 1883
	config_get mqtt_data_prefix $cfg mqtt_data_prefix "etactica"
	config_get mqtt_discovery_prefix $cfg mqtt_discovery_prefix "homeassistant"
	uci -q set mosquitto.$newcfg.connection="output-hass.${cfg}"
	uci -q set mosquitto.$newcfg.address="$mqtt_host:$mqtt_port"
	uci -q set mosquitto.$newcfg.cleansession=1

  config_get dtypes $cfg store_types
  config_get interval $cfg interval
  if [ -z "$dtypes" ]; then
    add_data_types cumulative_wh "$newcfg" $interval $mqtt_data_prefix
  else
    config_list_foreach "$cfg" store_types add_data_types "$newcfg" $interval $mqtt_data_prefix
  fi
  uci -q add_list mosquitto.$newcfg.topic="/# out 1 ext/output-hass/$cfg/discovery $mqtt_discovery_prefix"
  config_get mqtt_user $cfg mqtt_user
  config_get mqtt_pass $cfg mqtt_pass
  config_get_bool mqtt_use_tls $cfg mqtt_use_tls 0
  config_get mqtt_cafile $cfg mqtt_cafile
  [ -n "$mqtt_user" ] && uci -q set mosquitto.$newcfg.remote_username="$mqtt_user"
  [ -n "$mqtt_pass" ] && uci -q set mosquitto.$newcfg.remote_password="$mqtt_pass"
  [ $mqtt_use_tls -eq 0 ] || {
    [ -n "$mqtt_cafile" ] && uci -q set mosquitto.$newcfg.cafile="$mqtt_cafile"
    [ -z "$mqtt_cafile" ] && uci -q set mosquitto.$newcfg.capath=/etc/ssl/certs
  }

	uci -q commit
}

add_instance() {
	local cfg="$1"
	local enabled
	local ignore_model
	config_get_bool enabled "$cfg" enabled 0
	config_get_bool ignore_model "$cfg" ignore_model 0
	# We always remove it, and re-add it if needed.
 	config_load mosquitto && config_foreach remove_output bridge "$1"
 	# restore our own app config context
 	config_load $APP

	if [ $enabled -eq 0 ]; then
		printf "%s:%s is disabled, not starting\n" "$APP" "$cfg"
		monit unmonitor "$APP.$cfg"
	else
	  add_output "$cfg"
		procd_open_instance
		procd_set_param command output-hass.lua -i $cfg
		procd_set_param file /etc/config/$APP
		procd_set_param pidfile /var/run/$APP.$cfg.pid
		[ $ignore_model -eq 1 ] && procd_append_param command --ignore_model
		procd_close_instance
		[ -f /etc/monit.d/$APP.$cfg.process.check ] || {
			sed s/INSTANCE/$cfg/g /usr/share/$APP/monit.process.check.template > /etc/monit.d/$APP.$cfg.process.check
			monit reload
		}
		monit monitor "$APP.$cfg"
	fi
}

start_service() {
	config_load $APP && config_foreach add_instance instance
	reload_config
}

service_triggers() {
	procd_add_reload_trigger $APP
}
