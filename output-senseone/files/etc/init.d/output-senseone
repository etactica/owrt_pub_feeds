#!/bin/sh /etc/rc.common
START=85
USE_PROCD=1

[ -f /lib/rme_utils.sh ] && . /lib/rme_utils.sh

remove_output() {
	local cfg="$1"
	local connection
	config_get connection "$cfg" connection
	[ "$connection" = "senseone" ] && uci -q delete mosquitto.$cfg
}

add_data_types() {
	local dtype="$1"
	local newcfg="$2"
	local interval="$3"
	local username="$4"
	uci -q add_list mosquitto.$newcfg.topic="/interval/$interval/+/$dtype/# out 1 status/local/json $username/status"
	# handle the split variables for energy on a bar
	[ "$dtype" = "cumulative_wh" ] && add_data_types wh_in $newcfg $interval $username
}

add_output() {
	local cfg="$1"
	local username="$2"
	local password="$3"
	local address="$4"
	local interval="$5"
	local include_live="$6"
	local insecure="$7"
	local gateid
	gateid=$(uci -q get system.@system[0].rme_stablemac)
	local newcfg
	newcfg=$(uci add mosquitto bridge)
	uci -q batch <<-EOF
		set mosquitto.$newcfg.connection=senseone
		set mosquitto.$newcfg.address="$address"
		set mosquitto.$newcfg.cleansession=0
		set mosquitto.$newcfg.attempt_unsubscribe=false
		set mosquitto.$newcfg.notification_topic=$username/bridge/$gateid/state
		set mosquitto.$newcfg.try_private=false
		set mosquitto.$newcfg.remote_username="$username"
		set mosquitto.$newcfg.remote_password="$password"
		add_list mosquitto.$newcfg.topic="/alert/new/# out 1 status/local/json $username/status"
		add_list mosquitto.$newcfg.topic="/alert/expired/# out 1 status/local/json $username/status"
		add_list mosquitto.$newcfg.topic="/cabinet/# out 1 status/local/json $username/status"
EOF
	[ -n "$interval" ] && {
		config_load output-senseone # "context" was still mosquitto at this point
		config_get dtypes $cfg store_types
		if [ -z "$dtypes" ]; then
			add_data_types cumulative_wh "$newcfg" $interval $username
		else
			config_list_foreach "$cfg" store_types add_data_types "$newcfg" $interval $username
		fi
	}
	[ "$include_live" = "true" ] && uci -q add_list mosquitto.$newcfg.topic="/device/# out 1 status/local/json $username/status"
	[ "$insecure" = "true" ] || uci -q set mosquitto.$newcfg.cafile=/etc/ssl/certs/senseonetech-mqtt.crt
	uci -q commit
}

add_instance() {
	local cfg="$1"
	local enabled username password address interval
	config_get_bool enabled "$cfg" enabled 0
	config_get username "$cfg" username
	config_get password "$cfg" password
	config_get address "$cfg" address "mqtt.senseonetech.com:8883"
	config_get interval "$cfg" interval "15min"
	# We always remove it, and re-add it if needed.
	config_load mosquitto && config_foreach remove_output bridge
	if [ $enabled -eq 0 ]; then
		echo "Disabling SenseOne"
		rm -f /etc/cron.d/daily/republish_cabinet_model.lua
		monit unmonitor output-senseone
	else
		[ -z "$username" ] && { echo "username is required!"; return 1;}
		[ -z "$password" ] && { echo "password is required!"; return 1;}
		assert_ntp_up;
		echo "Enabling SenseOne"
		case "$username" in
			etactica_hq)
				add_output $cfg $username $password $address $interval true
				;;
			marel_iceland)
				add_output $cfg $username $password $address "" true true
				;;
			*)
				add_output $cfg $username $password $address $interval
				;;
		esac
		[ -f /etc/cron.d/daily/republish_cabinet_model.lua ] || ln -s /usr/bin/republish_cabinet_model.lua /etc/cron.d/daily/
		monit monitor output-senseone
	fi
	uci commit
	reload_config
}

start_service() {
	procd_open_instance
	# Just something that succeeds
	procd_set_param command true
	procd_set_param file /etc/config/output-senseone
	procd_close_instance
	config_load output-senseone && config_foreach add_instance general
}

stop_service() {
	# Explicit stop just removes the bridge configs
	config_load mosquitto && config_foreach remove_output bridge
	uci commit
	reload_config
}

service_triggers() {
	procd_add_reload_trigger output-senseone
}
